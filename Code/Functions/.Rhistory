acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  10
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  10
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  20
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  1000
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  1000
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  1000
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  1000
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  1000
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
require(BayesLogit)
psi <-  15
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  15
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  15
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require(BayesLogit)
psi <-  15
n<- 1E6
y<- rpois(n,psi)
app_pg<- function(n,b,c){
m<- b/2/c*tanh(c/2)
v <- b/4/c^3 / cosh(c/2)^2* (sinh(c)-c)
rnorm(n,m,sqrt(v))
}
trace_theta<- numeric()
trace_w<- numeric()
# theta  <-  rnorm(1,9,sqrt(B))
y_sum <- sum(y)
steps<- 10000
burnin<- 5000
r<- 100000
logr<- log(r)
n<- length(y)
theta =1
for(i in 1:steps){
w<- app_pg(1,n*r, abs(theta))
var_theta <- 1/(  w)
mean_theta <- var_theta * ( (y_sum- r*n/2) )
theta<- rnorm(1,mean_theta,sqrt(var_theta))
if(i>burnin){
trace_theta <- c(trace_theta,theta)
trace_w <- c(trace_w,w)
}
}
mean(exp(theta+logr))
ts.plot(trace_w)
ts.plot(exp(trace_theta+logr))
mean(exp(trace_theta+logr))
acf(exp(trace_theta+logr),lag.max = 100)
require("igraph")
require("network")
require("sna")
require("ndtv")
library(networkD3)
setwd("~/git/ExploratoryGraph/Code/Functions/")
graph <- read.graph("../DataIngest/p.pacificus_neural.synaptic_1.graphml",format = "graphml")
gfDf<- get.data.frame(graph)
simpleNetwork(graph)
gfDf
simpleNetwork(gfDf)
forceNetwork(gfDf)
cluster_walktrap(graph)
graphClusters<- cluster_walktrap(graph)
members <- membership(graphClusters)
graph_d3 <- igraph_to_networkD3(graph, group = members)
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
graphClusters<- cluster_walktrap(graph)
members <- membership(graphClusters)
graph_d3 <- igraph_to_networkD3(graph)#, group = members)
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
graph_d3 <- igraph_to_networkD3(graph)#, group = members)
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name')
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
graphClusters<- cluster_walktrap(graph)
members <- membership(graphClusters)
graph_d3 <- igraph_to_networkD3(graph, group = members)
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
?cluster_walktrap
rmarkdown::render("graphLayout.R", "pdf_document")
require("rmarkdown")
install.packages("rmarkdown")
require("rmarkdown")
rmarkdown::render("graphLayout.R", "pdf_document")
rmarkdown::render("graphLayout.R")
require("rmarkdown")
```{r echo=FALSE, results='hide',message=FALSE}
rmarkdown::render("graphLayout.R")
require("rmarkdown")
rmarkdown::render("graphLayout.R")
require("rmarkdown")
rmarkdown::render("graphLayout.R")
require("rmarkdown")
rmarkdown::render("graphLayout.R")
```{r echo=FALSE,message=FALSE}
require("igraph",quietly = T)
require("rmarkdown")
rmarkdown::render("graphLayout.R")
require("rmarkdown")
rmarkdown::render("graphLayout.R")
V(graph)
degree(graph, v = V(graph), mode = c("all", "out", "in", "total"),
loops = TRUE, normalized = FALSE)
degree(graph, v = V(graph), mode = "all", loops = TRUE, normalized = FALSE)
?degree
require("igraph",quietly = T)
# require("network")
# require("sna")
# require("ndtv",quietly = T
require("networkD3",quietly = T)
setwd("~/git/ExploratoryGraph/Code/Functions/")
graph <- read.graph("../DataIngest/p.pacificus_neural.synaptic_1.graphml",format = "graphml")
graphClusters<- cluster_walktrap(graph)
members <- membership(graphClusters)
graph_d3 <- igraph_to_networkD3(graph, group = members)
forceNetwork(Links = graph_d3$links, Nodes = graph_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
#Here is the degree
degree(graph, v = V(graph), mode = "all", loops = TRUE, normalized = FALSE)
degree(graph, v = V(graph), mode = "all", loops = TRUE, normalized = FALSE)
